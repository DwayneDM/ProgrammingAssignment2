## The following function makeCacheMatrix creates a special matrix, which is a#
## list containing a function to #
## 1. Set the value of the matrix#
## 2. get the value of the matrix#
## 3. set the inverse of the matrix#
## 4. get the inverse of the matrix#
makeCacheMatrix <- function(x = matrix()) {#
	m <- NULL#
	set <- function(y)#
	{#
		x <<- y#
		m <<- NULL#
		get <- function() x#
		setinverse <- function(inverse) m <<- inverse#
		getinverse <- function() m#
		list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)#
}#
## Write a short comment describing this function#
## The following function cacheSolve calculates the inverse of the special#
## matrix created with the above function. It firts checks to see if the#
## inverse of the function has already been calculated. If so, it gets the#
## inverse of from the cache and skips the computation. Otherwise, it#
## calculates the inverse of the data and sets the inverse matrix in the#
## cache via the setinverse function#
#
cacheSolve <- function(x, ...) {#
        ## Return a matrix that is the inverse of 'x'#
        m <- x$getinverse()#
        if(!is.null(m)){#
        	message("getting cached data")#
        	return(m)#
        }#
        data <- x$get()#
        m <- solve(data, ...)#
        x$setinverse(m)#
        m#
}
